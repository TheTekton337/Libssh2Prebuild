diff --git a/src/libssh2_priv.h b/src/libssh2_priv.h
index b3ce7af..d8aaaa4 100644
--- a/src/libssh2_priv.h
+++ b/src/libssh2_priv.h
@@ -235,6 +235,7 @@ typedef enum
     libssh2_NB_state_jump3,
     libssh2_NB_state_jump4,
     libssh2_NB_state_jump5,
+    libssh2_NB_state_error_closing,
     libssh2_NB_state_end
 } libssh2_nonblocking_states;
 
diff --git a/src/sftp.c b/src/sftp.c
index b1a5352..e5a6116 100644
--- a/src/sftp.c
+++ b/src/sftp.c
@@ -896,6 +896,22 @@ static LIBSSH2_SFTP *sftp_init(LIBSSH2_SESSION *session)
         }
     }
 
+    if(session->sftpInit_state == libssh2_NB_state_error_closing) {
+      rc = _libssh2_channel_free(session->sftpInit_channel);
+      if(rc == LIBSSH2_ERROR_EAGAIN) {
+            _libssh2_error(session, LIBSSH2_ERROR_EAGAIN,
+                           "Would block closing channel");
+	    return NULL;
+      }
+      session->sftpInit_channel = NULL;
+      if(session->sftpInit_sftp) {
+        LIBSSH2_FREE(session, session->sftpInit_sftp);
+        session->sftpInit_sftp = NULL;
+      }
+      session->sftpInit_state = libssh2_NB_state_idle;
+      return NULL;
+    }
+    
     rc = sftp_packet_require(sftp_handle, SSH_FXP_VERSION,
                              0, &data, &data_len, 5);
     if(rc == LIBSSH2_ERROR_EAGAIN) {
@@ -972,14 +988,7 @@ static LIBSSH2_SFTP *sftp_init(LIBSSH2_SESSION *session)
     return sftp_handle;
 
   sftp_init_error:
-    while(_libssh2_channel_free(session->sftpInit_channel) ==
-           LIBSSH2_ERROR_EAGAIN);
-    session->sftpInit_channel = NULL;
-    if(session->sftpInit_sftp) {
-        LIBSSH2_FREE(session, session->sftpInit_sftp);
-        session->sftpInit_sftp = NULL;
-    }
-    session->sftpInit_state = libssh2_NB_state_idle;
+    session->sftpInit_state = libssh2_NB_state_error_closing;
     return NULL;
 }
 
diff --git a/src/transport.c b/src/transport.c
index 17af3e4..b6f6793 100644
--- a/src/transport.c
+++ b/src/transport.c
@@ -641,7 +641,8 @@ send_existing(LIBSSH2_SESSION *session, const unsigned char *data,
            we don't add this one up until the previous one has been sent. To
            make the caller really notice his/hers flaw, we return error for
            this case */
-        return LIBSSH2_ERROR_BAD_USE;
+        // return LIBSSH2_ERROR_BAD_USE;
+        _libssh2_debug (session, LIBSSH2_TRACE_SOCKET, "Address is different, but will resume nonetheless");
     }
 
     *ret = 1;                   /* set to make our parent return */
